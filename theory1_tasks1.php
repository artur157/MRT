<html>
    <head>
        <meta charset="utf-8">
        <title>Теория: понятие рекурсии</title>
        <link rel="stylesheet" href="css/myStyle.css" type="text/css">
    </head>
    <body>
        <?php
            require_once "help_functions.php";
            printNavigation();        // вывели панель навигации
            printSidebarTheory(1);    // вывели сайдбар для теории
        ?>
        
        <div id="page">
            <br><h1>Понятие рекурсии</h1><br>
            <br><h2>Задачи для самостоятельного решения</h2><br>
            <ol>
                <li>Напишите рекурсивную функцию, проверяющую правильность расстановки скобок в строке. При правильной расстановке выполняются условия:<br>
   - количество открывающих и закрывающих скобок равно.<br>
   - внутри любой пары открывающая – соответствующая закрывающая скобка, скобки расставлены правильно.<br>
Примеры неправильной расстановки: )(, ())(, ())(() и т.п.
                </li>
                <li>В строке могут присутствовать скобки как круглые, так и квадратные скобки. Каждой открывающей скобке соответствует закрывающая того же типа (круглой – круглая, квадратной- квадратная). Напишите рекурсивную функцию, проверяющую правильность расстановки скобок в этом случае.<br>
Пример неправильной расстановки: ( [ ) ].
                </li>
                <li>Число правильных скобочных структур длины 6 равно 5: ()()(), (())(), ()(()), ((())), (()()).
Напишите рекурсивную программу генерации всех правильных скобочных структур длины 2n.<br>
Указание: Правильная скобочная структура минимальной длины «()». Структуры большей длины получаются из структур меньшей длины, двумя способами:<br>
   - если меньшую структуру взять в скобки,<br>
   - если две меньших структуры записать последовательно.
</li>
                <li>Создайте рекурсивную процедуру, печатающую все возможные перестановки для целых чисел от 1 до N.</li>
                <li>Создайте функцию, подсчитывающую сумму элементов массива по следующему алгоритму: массив делится пополам, подсчитываются и складываются суммы элементов в каждой половине. Сумма элементов в половине массива подсчитывается по тому же алгоритму, то есть снова путем деления пополам. Деления происходят, пока в получившихся кусках массива не окажется по одному элементу и вычисление суммы, соответственно, не станет тривиальным.</li>
            </ol>
            
            
            <br>
            <a href="theory1.php">Вернуться к теории</a>
        </div>
        
    </body>
</html>